{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","id","name","email","className","src","alt","CardList","robots","cardsArray","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCQCQ,EAbF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACjB,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACE,6BAAKJ,IACL,4BAAIC,WCcGI,EApBE,SAACP,GAAU,IAKlBQ,EAAWR,EAAXQ,OACFC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OACE,cAAC,EAAD,CAEEX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,OAHZK,EAAOI,GAAGX,OAQrB,OAAO,8BAAMQ,KCLAI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,8BACE,uBACEX,UAAU,sCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCMHI,EAbA,SAACnB,GACd,OACE,qBACEoB,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAMGvB,EAAMwB,YCYEC,E,kDAlBb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG1B,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAK9B,MAAMwB,a,GAfMQ,aCsDbC,E,kDAjDb,aAAe,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAlB1C,EAAKX,MAAQ,CACXlB,OAAQ,GACRM,YAAa,IAJH,E,gEAQO,IAAD,OAClBwB,MAAM,8CACH7C,MAAK,SAAC8C,GACL,OAAOA,EAASC,UAEjB/C,MAAK,SAACgD,GACL,EAAKV,SAAS,CAAEvB,OAAQiC,S,+BASpB,IAAD,EACyBX,KAAKJ,MAA7BlB,EADD,EACCA,OAAQM,EADT,EACSA,YACV4B,EAAiBlC,EAAOmC,QAAO,SAACC,GACpC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAShC,EAAY+B,kBAIvD,OAAKrC,EAAOuC,OAKR,sBAAK3C,UAAU,KAAf,UACE,8CACA,cAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQkC,WATnB,gD,GAhCKV,aCGlBgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.6def1ced.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nconst Card = (props) => {\n  const {id, name, email}  = props;\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"Robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = (props) => {\n  // NOTE: Uncomment the test for checking if ErrorBoundary is working\n  // if (true) {\n  //   throw new Error(\"Something went wrong\");\n  // }\n  const { robots } = props;\n  const cardsArray = robots.map((user, i) => {\n    return (\n      <Card\n        key={robots[i].id}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n\n  return <div>{cardsArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div>\n      <input\n        className=\"pa3 ma2 ba b--green bg-lighest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"1px solid black\",\n        height: \"500px\",\n      }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\n// We can wrap ErrorBoundary around the component which we want error handling\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops That is not good!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n// import { robots } from \"./robots\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n    // this.setState({ robots: robots });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    // Loading\n    if (!robots.length) {\n      return <h1>Loading...</h1>;\n    } else {\n      // console.log(filteredRobots);\n      return (\n        <div className=\"tc\">\n          <h1>Robo Friends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nimport App from './containers/App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}